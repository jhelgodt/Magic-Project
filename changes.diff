diff --git a/backend/src/app.ts b/backend/src/app.ts
index 85b0756..682e988 100644
--- a/backend/src/app.ts
+++ b/backend/src/app.ts
@@ -63,10 +63,13 @@ app.get("/auth/user", (req, res) => {
   }
 });
 
+export default app;
+app.get("/me", (req, res) => {
+  console.log("🔎 Session user:", req.user);
+  res.json(req.user || { message: "Not logged in" });
+});
 // MongoDB connection
 mongoose
   .connect(process.env.MONGO_URI as string)
   .then(() => console.log("Connected to MongoDB"))
   .catch((err) => console.error("MongoDB connection error:", err));
-
-export default app;
diff --git a/backend/src/config/passport.ts b/backend/src/config/passport.ts
index 82c9c60..7455edd 100644
--- a/backend/src/config/passport.ts
+++ b/backend/src/config/passport.ts
@@ -1,5 +1,6 @@
 import passport from "passport";
 import { Strategy as GoogleStrategy } from "passport-google-oauth20";
+import User, { IUser } from "../models/userModel"; // Importera din user-model
 
 const GOOGLE_CLIENT_ID = process.env.GOOGLE_CLIENT_ID!;
 const GOOGLE_CLIENT_SECRET = process.env.GOOGLE_CLIENT_SECRET!;
@@ -11,16 +12,35 @@ passport.use(
       clientSecret: GOOGLE_CLIENT_SECRET,
       callbackURL: "/auth/google/callback",
     },
-    (accessToken, refreshToken, profile, done) => {
-      // Here, you can save the user to your database
-      // For now, we'll just return the profile
-      return done(null, profile);
+    async (accessToken, refreshToken, profile, done) => {
+      try {
+        console.log("🔁 Google profile:", profile);
+
+        const existingUser = await User.findOne({ googleId: profile.id });
+        console.log("Checking for existing user...");
+        if (existingUser) {
+          console.log("✅ Found existing user:", existingUser);
+          return done(null, existingUser);
+        }
+
+        const newUser = await User.create({
+          googleId: profile.id,
+          name: profile.displayName,
+          email: profile.emails?.[0]?.value || "",
+        });
+
+        console.log("🆕 Created new user:", newUser);
+        return done(null, newUser);
+      } catch (error) {
+        console.error("❌ Error in Google strategy:", error);
+        return done(error, undefined);
+      }
     }
   )
 );
 
-passport.serializeUser((user, done) => {
-  done(null, user);
+passport.serializeUser((user: any, done) => {
+  done(null, user._id); // ✅ spara bara _id i session
 });
 
 interface User {
