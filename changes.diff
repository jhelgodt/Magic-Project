diff --git a/backend/src/controllers/deckController.ts b/backend/src/controllers/deckController.ts
index 8382694..7cce2d5 100644
--- a/backend/src/controllers/deckController.ts
+++ b/backend/src/controllers/deckController.ts
@@ -12,6 +12,14 @@ declare global {
   }
 }
 
+export const getPublicDecks: RequestHandler = async (req, res) => {
+  try {
+    const publicDecks = await Deck.find({ isPublic: true }).populate("cards");
+    res.json(publicDecks);
+  } catch (err) {
+    res.status(500).json({ error: "Failed to fetch public decks" });
+  }
+};
 // üîÅ L√§gg till ett kort i en deck
 export const addCardToDeck: RequestHandler = async (req, res) => {
   try {
diff --git a/backend/src/models/deckModel.ts b/backend/src/models/deckModel.ts
index 9ecb92e..c025a31 100644
--- a/backend/src/models/deckModel.ts
+++ b/backend/src/models/deckModel.ts
@@ -5,13 +5,15 @@ export interface IDeck extends Document {
   description: string;
   cards: mongoose.Types.ObjectId[]; // Array of Card IDs
   user: mongoose.Types.ObjectId; // Nytt f√§lt f√∂r att koppla till anv√§ndare
+  isPublic: boolean; // Nytt f√§lt f√∂r att ange om decket √§r offentligt
 }
 
 const deckSchema: Schema = new Schema({
   name: { type: String, required: true },
   description: { type: String, required: true },
   cards: [{ type: mongoose.Schema.Types.ObjectId, ref: "Card" }],
-  user: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true }, // Nytt f√§lt
+  user: { type: mongoose.Schema.Types.ObjectId, ref: "User" }, // om det inte redan finns
+  isPublic: { type: Boolean, default: false }, // üëà ny flagga
 });
 
 export default mongoose.model<IDeck>("Deck", deckSchema);
diff --git a/backend/src/routes/deckRoutes.ts b/backend/src/routes/deckRoutes.ts
index 298a97e..25ffe5c 100644
--- a/backend/src/routes/deckRoutes.ts
+++ b/backend/src/routes/deckRoutes.ts
@@ -6,10 +6,12 @@ import {
   deleteDeck,
   updateDeck,
   addCardToDeck,
+  getPublicDecks,
 } from "../controllers/deckController";
 
 const router = express.Router();
 
+router.get("/public", getPublicDecks); // üëà detta √§r tillg√§ngligt utan inloggning
 router.get("/", getAllDecks);
 router.get("/:id", getDeckById);
 router.post("/", createDeck);
diff --git a/changes.diff b/changes.diff
index bad506e..e69de29 100644
--- a/changes.diff
+++ b/changes.diff
@@ -1,481 +0,0 @@
-diff --git a/backend/src/app.ts b/backend/src/app.ts
-index 682e988..c5ef0f9 100644
---- a/backend/src/app.ts
-+++ b/backend/src/app.ts
-@@ -1,37 +1,62 @@
--import express from "express";
-+import express, { Request, Response, NextFunction } from "express";
- import cors from "cors";
- import mongoose from "mongoose";
-+import session from "express-session";
-+import MongoStore from "connect-mongo";
-+import passport from "passport";
-+import "./config/passport"; // Import Passport strategy
-+
- import cardRoutes from "./routes/cardRoutes";
- import deckRoutes from "./routes/deckRoutes";
- import authRoutes from "./routes/authRoutes";
--import passport from "passport";
--import "./config/passport"; // Import the Passport configuration
--import session from "express-session";
--import MongoStore from "connect-mongo";
- 
--const app = express();
-+// Extend session object
-+declare module "express-session" {
-+  interface Session {
-+    passport?: { user?: string };
-+  }
-+}
- 
-+const app = express();
- const allowedOrigins = ["http://localhost:4200", "https://jhelgodt.github.io"];
- 
-+// ‚úÖ Middleware: JSON parsing
-+app.use(express.json());
-+
-+// ‚úÖ Session config (must come before passport.session)
- app.use(
-   session({
--    secret: process.env.SESSION_SECRET || "your_secret_key", // Use a secure secret in production
-+    secret: process.env.SESSION_SECRET || "your_secret_key",
-     resave: false,
-     saveUninitialized: false,
-     store: MongoStore.create({
--      mongoUrl: process.env.MONGO_URI, // Use your MongoDB connection string
--      collectionName: "sessions", // Optional: specify the collection name for sessions
-+      mongoUrl: process.env.MONGO_URI,
-+      collectionName: "sessions",
-     }),
-     cookie: {
--      maxAge: 24 * 60 * 60 * 1000, // 1 day session timeout (in milliseconds)
--      secure: process.env.NODE_ENV === "production", // Use secure cookies in production (requires HTTPS)
--      httpOnly: true, // Prevent client-side JavaScript from accessing the cookie
-+      maxAge: 24 * 60 * 60 * 1000,
-+      secure: process.env.NODE_ENV === "production",
-+      httpOnly: true,
-     },
-   })
- );
-+
-+// ‚úÖ Passport middleware
- app.use(passport.initialize());
- app.use(passport.session());
--app.use("/auth", authRoutes);
-+
-+// ‚úÖ Logging middleware (for debugging sessions)
-+let count = 0;
-+const showLogs = (req: Request, res: Response, next: NextFunction) => {
-+  count++;
-+  console.log(`count: ${count}`);
-+  console.log("req.session.passport:", req.session.passport);
-+  console.log("req.user:", req.user);
-+  next();
-+};
-+app.use(showLogs);
-+
-+// ‚úÖ CORS config
- app.use(
-   cors({
-     origin: (origin, callback) => {
-@@ -45,31 +70,34 @@ app.use(
-     credentials: true,
-   })
- );
--app.use(express.json());
- 
--// Routes
--app.use("/api/v1/cards", cardRoutes); // Add card routes
--app.use("/api/v1/decks", deckRoutes); // Add deck routes
-+// ‚úÖ Routes
-+app.use("/auth", authRoutes);
-+app.use("/api/v1/cards", cardRoutes);
-+app.use("/api/v1/decks", deckRoutes);
- 
--// Test route
-+// ‚úÖ Test routes
- app.get("/", (req, res) => {
-   res.send("API is running!");
- });
-+
- app.get("/auth/user", (req, res) => {
-   if (req.isAuthenticated()) {
--    res.json(req.user); // Returns the logged-in user's profile
-+    res.json(req.user);
-   } else {
-     res.status(401).json({ error: "Not authenticated" });
-   }
- });
- 
--export default app;
- app.get("/me", (req, res) => {
-   console.log("üîé Session user:", req.user);
-   res.json(req.user || { message: "Not logged in" });
- });
--// MongoDB connection
-+
-+// ‚úÖ Connect to MongoDB
- mongoose
-   .connect(process.env.MONGO_URI as string)
-   .then(() => console.log("Connected to MongoDB"))
-   .catch((err) => console.error("MongoDB connection error:", err));
-+
-+export default app;
-diff --git a/backend/src/config/passport.ts b/backend/src/config/passport.ts
-index 7455edd..831fec8 100644
---- a/backend/src/config/passport.ts
-+++ b/backend/src/config/passport.ts
-@@ -40,7 +40,8 @@ passport.use(
- );
- 
- passport.serializeUser((user: any, done) => {
--  done(null, user._id); // ‚úÖ spara bara _id i session
-+  console.log("üîç serializeUser called with user:", user);
-+  done(null, user._id); // ‚úÖ Save only _id in session
- });
- 
- interface User {
-@@ -50,6 +51,19 @@ interface User {
-   // Add other fields as needed
- }
- 
--passport.deserializeUser((obj: User | null, done) => {
--  done(null, obj);
-+passport.deserializeUser(async (id: string, done) => {
-+  console.log("üîç deserializeUser called with ID:", id);
-+  try {
-+    console.log("üîç Attempting to find user in database with ID:", id);
-+    const user = await User.findById(id); // Retrieve the user by _id from the database
-+    if (!user) {
-+      console.warn("‚ö†Ô∏è No user found with ID:", id);
-+      return done(null, false); // No user found
-+    }
-+    console.log("‚úÖ User found:", user);
-+    done(null, user); // Pass the full user object to the session
-+  } catch (error) {
-+    console.error("‚ùå Error in deserializeUser:", error);
-+    done(error, null);
-+  }
- });
-diff --git a/backend/src/controllers/deckController.ts b/backend/src/controllers/deckController.ts
-index a5b53ff..8382694 100644
---- a/backend/src/controllers/deckController.ts
-+++ b/backend/src/controllers/deckController.ts
-@@ -1,7 +1,19 @@
--import { Request, Response } from "express";
-+import { Request, Response, RequestHandler } from "express";
- import Deck from "../models/deckModel";
-+import { IUser } from "../models/userModel";
- 
--export const addCardToDeck = async (req: Request, res: Response) => {
-+// üëá Ut√∂kar Express-typerna s√• TypeScript vet att req.user existerar
-+declare global {
-+  namespace Express {
-+    interface User extends IUser {}
-+    interface Request {
-+      user?: IUser;
-+    }
-+  }
-+}
-+
-+// üîÅ L√§gg till ett kort i en deck
-+export const addCardToDeck: RequestHandler = async (req, res) => {
-   try {
-     const { cardId } = req.body;
-     const deck = await Deck.findByIdAndUpdate(
-@@ -9,73 +21,98 @@ export const addCardToDeck = async (req: Request, res: Response) => {
-       { $push: { cards: cardId } },
-       { new: true }
-     ).populate("cards");
-+
-     if (!deck) {
-       res.status(404).json({ error: "Deck not found" });
-       return;
-     }
-+
-     res.json(deck);
-+    return;
-   } catch (err) {
-     res.status(400).json({ error: "Failed to add card to deck" });
-+    return;
-   }
- };
--// GET all decks
--export const getAllDecks = async (req: Request, res: Response) => {
-+
-+// üìÑ H√§mta alla decks f√∂r den inloggade anv√§ndaren
-+export const getAllDecks: RequestHandler = async (req, res) => {
-+  if (!req.user) {
-+    res.status(401).json({ error: "Not authenticated" });
-+    return;
-+  }
-+
-   try {
--    const decks = await Deck.find().populate("cards"); // Populate card details
-+    const decks = await Deck.find({ user: req.user._id }).populate("cards");
-     res.json(decks);
-   } catch (err) {
--    res.status(500).json({ error: "Failed to fetch decks" });
-+    res.status(500).json({ error: "Failed to fetch your decks" });
-   }
- };
- 
--// GET a deck by ID
--export const getDeckById = async (req: Request, res: Response) => {
-+// üìÑ H√§mta en enskild deck
-+export const getDeckById: RequestHandler = async (req, res) => {
-   try {
-     const deck = await Deck.findById(req.params.id).populate("cards");
-+
-     if (!deck) {
-       res.status(404).json({ error: "Deck not found" });
-       return;
-     }
-+
-     res.json(deck);
-   } catch (err) {
-     res.status(500).json({ error: "Failed to fetch deck" });
-   }
- };
- 
--// POST ‚Äì create a new deck
--export const createDeck = async (req: Request, res: Response) => {
-+// ‚ûï Skapa ny deck kopplad till anv√§ndare
-+export const createDeck: RequestHandler = async (req, res) => {
-+  if (!req.user) {
-+    res.status(401).json({ error: "Not authenticated" });
-+    return;
-+  }
-+
-   try {
--    const newDeck = await Deck.create(req.body);
-+    const newDeck = await Deck.create({
-+      ...req.body,
-+      user: req.user._id,
-+    });
-+
-     res.status(201).json(newDeck);
-   } catch (err) {
-     res.status(400).json({ error: "Failed to create deck" });
-   }
- };
- 
--// DELETE a deck
--export const deleteDeck = async (req: Request, res: Response) => {
-+// ‚ùå Ta bort deck
-+export const deleteDeck: RequestHandler = async (req, res) => {
-   try {
-     const deletedDeck = await Deck.findByIdAndDelete(req.params.id);
-+
-     if (!deletedDeck) {
-       res.status(404).json({ error: "Deck not found" });
-       return;
-     }
-+
-     res.json({ message: "Deck deleted" });
-   } catch (err) {
-     res.status(500).json({ error: "Failed to delete deck" });
-   }
- };
- 
--// PUT ‚Äì update a deck
--export const updateDeck = async (req: Request, res: Response) => {
-+// ‚úèÔ∏è Uppdatera deck
-+export const updateDeck: RequestHandler = async (req, res) => {
-   try {
-     const updatedDeck = await Deck.findByIdAndUpdate(req.params.id, req.body, {
-       new: true,
-     });
-+
-     if (!updatedDeck) {
-       res.status(404).json({ error: "Deck not found" });
-       return;
-     }
-+
-     res.json(updatedDeck);
-   } catch (err) {
-     res.status(400).json({ error: "Failed to update deck" });
-diff --git a/backend/src/routes/authRoutes.ts b/backend/src/routes/authRoutes.ts
-index b148ac5..8621ef6 100644
---- a/backend/src/routes/authRoutes.ts
-+++ b/backend/src/routes/authRoutes.ts
-@@ -1,4 +1,4 @@
--import express from "express";
-+import express, { NextFunction, Request, Response } from "express";
- import passport from "passport";
- 
- const router = express.Router();
-@@ -10,12 +10,20 @@ const frontendUrl = isProduction
- // Start Google OAuth login
- router.get(
-   "/google",
-+  (req: Request, res: Response, next: NextFunction) => {
-+    console.log("Starting Google OAuth login...");
-+    next();
-+  },
-   passport.authenticate("google", { scope: ["profile", "email"] })
- );
- 
- // Handle Google OAuth callback
- router.get(
-   "/google/callback",
-+  (req: Request, res: Response, next: NextFunction) => {
-+    console.log("Handling Google OAuth callback...");
-+    next();
-+  },
-   passport.authenticate("google", { failureRedirect: "/" }),
-   (req, res) => {
-     res.redirect(`${frontendUrl}`); //
-diff --git a/changes.diff b/changes.diff
-index 610c609..82709e9 100644
---- a/changes.diff
-+++ b/changes.diff
-@@ -1,73 +0,0 @@
--diff --git a/backend/src/app.ts b/backend/src/app.ts
--index 85b0756..682e988 100644
----- a/backend/src/app.ts
--+++ b/backend/src/app.ts
--@@ -63,10 +63,13 @@ app.get("/auth/user", (req, res) => {
--   }
-- });
-- 
--+export default app;
--+app.get("/me", (req, res) => {
--+  console.log("üîé Session user:", req.user);
--+  res.json(req.user || { message: "Not logged in" });
--+});
-- // MongoDB connection
-- mongoose
--   .connect(process.env.MONGO_URI as string)
--   .then(() => console.log("Connected to MongoDB"))
--   .catch((err) => console.error("MongoDB connection error:", err));
---
---export default app;
--diff --git a/backend/src/config/passport.ts b/backend/src/config/passport.ts
--index 82c9c60..7455edd 100644
----- a/backend/src/config/passport.ts
--+++ b/backend/src/config/passport.ts
--@@ -1,5 +1,6 @@
-- import passport from "passport";
-- import { Strategy as GoogleStrategy } from "passport-google-oauth20";
--+import User, { IUser } from "../models/userModel"; // Importera din user-model
-- 
-- const GOOGLE_CLIENT_ID = process.env.GOOGLE_CLIENT_ID!;
-- const GOOGLE_CLIENT_SECRET = process.env.GOOGLE_CLIENT_SECRET!;
--@@ -11,16 +12,35 @@ passport.use(
--       clientSecret: GOOGLE_CLIENT_SECRET,
--       callbackURL: "/auth/google/callback",
--     },
---    (accessToken, refreshToken, profile, done) => {
---      // Here, you can save the user to your database
---      // For now, we'll just return the profile
---      return done(null, profile);
--+    async (accessToken, refreshToken, profile, done) => {
--+      try {
--+        console.log("üîÅ Google profile:", profile);
--+
--+        const existingUser = await User.findOne({ googleId: profile.id });
--+        console.log("Checking for existing user...");
--+        if (existingUser) {
--+          console.log("‚úÖ Found existing user:", existingUser);
--+          return done(null, existingUser);
--+        }
--+
--+        const newUser = await User.create({
--+          googleId: profile.id,
--+          name: profile.displayName,
--+          email: profile.emails?.[0]?.value || "",
--+        });
--+
--+        console.log("üÜï Created new user:", newUser);
--+        return done(null, newUser);
--+      } catch (error) {
--+        console.error("‚ùå Error in Google strategy:", error);
--+        return done(error, undefined);
--+      }
--     }
--   )
-- );
-- 
---passport.serializeUser((user, done) => {
---  done(null, user);
--+passport.serializeUser((user: any, done) => {
--+  done(null, user._id); // ‚úÖ spara bara _id i session
-- });
-- 
-- interface User {
-diff --git a/frontend/src/app/services/deck.service.ts b/frontend/src/app/services/deck.service.ts
-index eaa53b1..a1bbf79 100644
---- a/frontend/src/app/services/deck.service.ts
-+++ b/frontend/src/app/services/deck.service.ts
-@@ -8,40 +8,53 @@ import { Observable } from "rxjs";
- export class DeckService {
-   private API_URL: string;
- 
--  constructor(
--    private http: HttpClient,
--    @Inject("API_URL") apiUrl: string // Inject the API_URL from app.config.ts
--  ) {
--    this.API_URL = `${apiUrl}/api/v1`; // Add /api/v1 to the base URL
-+  constructor(private http: HttpClient, @Inject("API_URL") apiUrl: string) {
-+    this.API_URL = `${apiUrl}/api/v1`;
-   }
- 
--  // Fetch all decks
-+  // Fetch all decks (auth required)
-   getAllDecks(): Observable<any> {
--    return this.http.get(`${this.API_URL}/decks`);
-+    return this.http.get(`${this.API_URL}/decks`, {
-+      withCredentials: true,
-+    });
-   }
- 
--  // Get a deck by ID
-+  // Get a deck by ID (auth required)
-   getDeckById(deckId: string): Observable<any> {
--    return this.http.get(`${this.API_URL}/decks/${deckId}`);
-+    return this.http.get(`${this.API_URL}/decks/${deckId}`, {
-+      withCredentials: true,
-+    });
-   }
- 
--  // Create a new deck
-+  // Create a new deck (auth required)
-   createDeck(deckData: any): Observable<any> {
--    return this.http.post(`${this.API_URL}/decks`, deckData);
-+    return this.http.post(`${this.API_URL}/decks`, deckData, {
-+      withCredentials: true,
-+    });
-   }
- 
--  // Update a deck
-+  // Update a deck (auth required)
-   updateDeck(deckId: string, deckData: any): Observable<any> {
--    return this.http.put(`${this.API_URL}/decks/${deckId}`, deckData);
-+    return this.http.put(`${this.API_URL}/decks/${deckId}`, deckData, {
-+      withCredentials: true,
-+    });
-   }
- 
--  // Delete a deck
-+  // Delete a deck (auth required)
-   deleteDeck(deckId: string): Observable<any> {
--    return this.http.delete(`${this.API_URL}/decks/${deckId}`);
-+    return this.http.delete(`${this.API_URL}/decks/${deckId}`, {
-+      withCredentials: true,
-+    });
-   }
- 
--  // Add a card to a deck
-+  // Add a card to a deck (auth required)
-   addCardToDeck(deckId: string, cardId: string): Observable<any> {
--    return this.http.post(`${this.API_URL}/decks/${deckId}/cards`, { cardId });
-+    return this.http.put(
-+      `${this.API_URL}/decks/${deckId}/add-card`,
-+      { cardId },
-+      {
-+        withCredentials: true,
-+      }
-+    );
-   }
- }
diff --git a/frontend/src/app/components/deck-builder/deck-builder.component.html b/frontend/src/app/components/deck-builder/deck-builder.component.html
index 3a08851..468c56d 100644
--- a/frontend/src/app/components/deck-builder/deck-builder.component.html
+++ b/frontend/src/app/components/deck-builder/deck-builder.component.html
@@ -12,12 +12,23 @@
           placeholder="Deck Name"
           required
         />
+
         <textarea
           class="deck-builder__textarea"
           formControlName="description"
           placeholder="Deck Description"
           required
         ></textarea>
+
+        <label class="deck-builder__checkbox-label">
+          <input
+            type="checkbox"
+            formControlName="isPublic"
+            class="deck-builder__checkbox"
+          />
+          Make this deck public
+        </label>
+
         <button class="deck-builder__button" type="submit">Create Deck</button>
       </form>
     </div>
@@ -26,10 +37,16 @@
       <div *ngIf="decks.length === 0" class="deck-builder__empty">
         No decks available.
       </div>
+
       <div class="deck-card" *ngFor="let deck of decks">
         <div class="deck-card__info">
-          <h2 class="deck-card__title">{{ deck.name }}</h2>
+          <h3 class="deck-card__title">{{ deck.name }}</h3>
           <p class="deck-card__details">{{ deck.description }}</p>
+
+          <div class="deck-card__meta" *ngIf="deck.isPublic">
+            <span class="deck-card__tag">üåç Public Deck</span>
+          </div>
+
           <button class="deck-card__button" (click)="viewDeck(deck._id)">
             View Deck
           </button>
diff --git a/frontend/src/app/components/deck-builder/deck-builder.component.scss b/frontend/src/app/components/deck-builder/deck-builder.component.scss
index 9d96bc4..2965a47 100644
--- a/frontend/src/app/components/deck-builder/deck-builder.component.scss
+++ b/frontend/src/app/components/deck-builder/deck-builder.component.scss
@@ -24,6 +24,7 @@
       align-items: center;
     }
 
+    // Input och textarea fr√•n tidigare
     &__input,
     &__textarea {
       width: 100%;
@@ -37,6 +38,22 @@
     &__button {
       @include nav-link-resume;
     }
+
+    // Ny stil f√∂r checkbox-label: visar checkboxen och texten snyggt
+    &__checkbox-label {
+      display: flex;
+      align-items: center;
+      gap: 0.5rem;
+      font-size: 1rem;
+      color: $color-text-dark;
+      user-select: none;
+    }
+
+    // Liten stil f√∂r checkboxen
+    &__checkbox {
+      width: 1rem;
+      height: 1rem;
+    }
   }
 
   &__grid {
@@ -71,6 +88,22 @@
 
     &__button {
       @include nav-link-resume;
+      margin-top: 1rem;
+    }
+
+    // Ny meta-sektion f√∂r extra info, exempelvis public tag
+    &__meta {
+      margin-bottom: 1rem;
+    }
+
+    // Ny stil f√∂r en public tag
+    &__tag {
+      display: inline-block;
+      padding: 0.25rem 0.5rem;
+      background-color: $color-primary-light; // Se till att din _variables.scss har en l√§mplig f√§rg
+      color: $color-text-dark;
+      font-size: 0.875rem;
+      border-radius: 4px;
     }
   }
 }
diff --git a/frontend/src/app/components/deck-builder/deck-builder.component.ts b/frontend/src/app/components/deck-builder/deck-builder.component.ts
index 8fef7dd..aaf2361 100644
--- a/frontend/src/app/components/deck-builder/deck-builder.component.ts
+++ b/frontend/src/app/components/deck-builder/deck-builder.component.ts
@@ -1,10 +1,12 @@
-import { Component, OnInit } from "@angular/core";
-import { HttpClient } from "@angular/common/http";
+import { Component, OnInit, ChangeDetectorRef } from "@angular/core";
 import { Router } from "@angular/router";
-import { API_URL } from "../../app.config";
-import { ChangeDetectorRef } from "@angular/core";
-import { CommonModule } from "@angular/common"; // Import CommonModule
-import { FormBuilder, FormGroup, ReactiveFormsModule } from "@angular/forms";
+import { CommonModule } from "@angular/common";
+import {
+  FormBuilder,
+  FormGroup,
+  ReactiveFormsModule,
+  Validators,
+} from "@angular/forms";
 import { DeckService } from "../../services/deck.service";
 
 @Component({
@@ -22,25 +24,82 @@ export class DeckBuilderComponent implements OnInit {
     private deckService: DeckService,
     private router: Router,
     private cdr: ChangeDetectorRef,
-    private fb: FormBuilder // Inject FormBuilder here
+    private fb: FormBuilder
   ) {
     this.newDeckForm = this.fb.group({
-      name: [""],
-      description: [""],
+      name: ["", Validators.required],
+      description: ["", Validators.required],
+      isPublic: [false], // ‚úÖ Ny form control
     });
   }
 
   ngOnInit(): void {
-    this.deckService.getAllDecks().subscribe((data) => {
-      this.decks = data;
+    this.loadDecks();
+  }
+
+  loadDecks(): void {
+    // Skapa tv√• parallella anrop
+    const userDecks$ = this.deckService.getAllDecks();
+    const publicDecks$ = this.deckService.getPublicDecks();
+
+    userDecks$.subscribe({
+      next: (userDecks) => {
+        publicDecks$.subscribe({
+          next: (publicDecks) => {
+            // Filtrera bort duplicerade (t.ex. om anv√§ndarens deck ocks√• √§r publik)
+            const uniquePublicDecks = publicDecks.filter(
+              (publicDeck: any) =>
+                !userDecks.some(
+                  (userDeck: any) => userDeck._id === publicDeck._id
+                )
+            );
+
+            this.decks = [...userDecks, ...uniquePublicDecks];
+            this.cdr.detectChanges();
+          },
+          error: (err) => {
+            console.error("Failed to fetch public decks:", err);
+          },
+        });
+      },
+      error: (err) => {
+        // Om anv√§ndaren inte √§r inloggad, h√§mta bara publika decks
+        if (err.status === 401) {
+          publicDecks$.subscribe({
+            next: (publicDecks) => {
+              this.decks = publicDecks;
+              this.cdr.detectChanges();
+            },
+            error: (err2) => {
+              console.error(
+                "Failed to fetch public decks (unauthenticated):",
+                err2
+              );
+            },
+          });
+        } else {
+          console.error("Failed to fetch user decks:", err);
+        }
+      },
     });
   }
 
   createDeck(): void {
+    if (this.newDeckForm.invalid) {
+      return;
+    }
+
     const newDeck = this.newDeckForm.value;
-    this.deckService.createDeck(newDeck).subscribe((data) => {
-      this.decks.push(data);
-      this.newDeckForm.reset();
+
+    this.deckService.createDeck(newDeck).subscribe({
+      next: (createdDeck) => {
+        this.decks.push(createdDeck);
+        this.newDeckForm.reset({ isPublic: false }); // üîÅ beh√•ll false som default
+        this.cdr.detectChanges();
+      },
+      error: (err) => {
+        console.error("Failed to create deck:", err);
+      },
     });
   }
 
diff --git a/frontend/src/app/services/deck.service.ts b/frontend/src/app/services/deck.service.ts
index a1bbf79..a08d95e 100644
--- a/frontend/src/app/services/deck.service.ts
+++ b/frontend/src/app/services/deck.service.ts
@@ -12,6 +12,12 @@ export class DeckService {
     this.API_URL = `${apiUrl}/api/v1`;
   }
 
+  getPublicDecks(): Observable<any> {
+    return this.http.get(`${this.API_URL}/decks/public`, {
+      withCredentials: true, // valfritt, men s√§kert
+    });
+  }
+
   // Fetch all decks (auth required)
   getAllDecks(): Observable<any> {
     return this.http.get(`${this.API_URL}/decks`, {
diff --git a/frontend/src/styles/_variables.scss b/frontend/src/styles/_variables.scss
index 1836174..3abfa5c 100644
--- a/frontend/src/styles/_variables.scss
+++ b/frontend/src/styles/_variables.scss
@@ -1,11 +1,17 @@
 // üé® F√§rger
-$color-primary: #007aff; // En mer modern bl√• (lik Apple blue)
-$color-accent: #ff6b6b; // En kontrastf√§rg f√∂r t.ex. call-to-actions
+$color-primary: #007aff; // Apple blue
+$color-primary-light: #66b3ff; // Ljusare bl√• f√∂r hover eller bakgrunder
+$color-primary-dark: #0051b3; // M√∂rkare bl√• f√∂r aktiva tillst√•nd
 
-$color-bg-light: #ffffff; // üëà vit bakgrund
+$color-accent: #ff6b6b; // Accentf√§rg (t.ex. r√∂d/orange CTA)
+$color-accent-light: #ffa8a8;
+$color-accent-dark: #cc4c4c;
+
+$color-bg-light: #ffffff;
 $color-bg-dark: #121212;
 
-$color-text-dark: #111111; // lite m√∂rkare √§n din nuvarande #222 f√∂r b√§ttre kontrast
-$color-text-muted: #666;
+$color-text-dark: #111111;
+$color-text-muted: #666666;
 $color-text-light: #ffffff;
+
 $color-border: #e0e0e0;
